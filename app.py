import streamlit as st
import pandas as pd
import joblib
import time
from datetime import datetime
import os

# --- App Configuration ---
st.set_page_config(
    page_title="Arogya Sahayak | Health Assistant",
    page_icon="ЁЯй║",
    layout="wide"
)

# --- Database File ---
DATABASE_FILE = "patient_database.csv"

# --- 1. TRANSLATION DICTIONARY (Expanded) ---
translations = {
    # --- General & Sidebar ---
    "sidebar_title": {"en": "Controls", "mr": "рдирд┐рдпрдВрддреНрд░рдгреЗ", "hi": "рдирд┐рдпрдВрддреНрд░рдг"},
    "language_label": {"en": "Select Language", "mr": "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛", "hi": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ"},
    "tool_choice_label": {"en": "Navigation", "mr": "рдорд╛рд░реНрдЧрджрд░реНрд╢рди", "hi": "рдиреЗрд╡рд┐рдЧреЗрд╢рди"},
    "sidebar_info": {
        "en": "**Arogya Sahayak** is a functional prototype for tracking patient health and assisting in early disease detection.",
        "mr": "**рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ** рд╣реЗ рд░реБрдЧреНрдгрд╛рдВрдЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдпрд╛рдЪрд╛ рдорд╛рдЧреЛрд╡рд╛ рдШреЗрдгреНрдпрд╛рд╕рд╛рдареА рдЖрдгрд┐ рд░реЛрдЧрд╛рдЪреНрдпрд╛ рд▓рд╡рдХрд░ рдирд┐рджрд╛рдирд╛рд╕рд╛рдареА рдорджрдд рдХрд░рдгрд╛рд░реЗ рдПрдХ рдХрд╛рд░реНрдпрд╛рддреНрдордХ рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдк рдЖрд╣реЗ.",
        "hi": "**рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ** рд░реЛрдЧреА рдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкрд░ рдирдЬрд╝рд░ рд░рдЦрдиреЗ рдФрд░ рдмреАрдорд╛рд░реА рдХрд╛ рд╢реАрдШреНрд░ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдПрдХ рдХрд╛рд░реНрдпрд╛рддреНрдордХ рдкреНрд░реЛрдЯреЛрдЯрд╛рдЗрдк рд╣реИред"
    },
    
    # --- Page Names ---
    "home_page_name": {"en": "ЁЯПа Home", "mr": "ЁЯПа рдореБрдЦреНрдпрдкреГрд╖реНрда", "hi": "ЁЯПа рд╣реЛрдо рдкреЗрдЬ"},
    "dashboard_name": {"en": "ЁЯУК Dashboard", "mr": "ЁЯУК рдбреЕрд╢рдмреЛрд░реНрдб", "hi": "ЁЯУК рдбреИрд╢рдмреЛрд░реНрдб"},
    "maternal_tool_name": {"en": "ЁЯСйтАНтЪХя╕П Maternal Health", "mr": "ЁЯСйтАНтЪХя╕П рдорд╛рддрд╛ рдЖрд░реЛрдЧреНрдп", "hi": "ЁЯСйтАНтЪХя╕П рдорд╛рддреГ рд╕реНрд╡рд╛рд╕реНрдереНрдп"},
    "disease_tool_name": {"en": "ЁЯй║ Disease Prediction", "mr": "ЁЯй║ рд░реЛрдЧ рдирд┐рджрд╛рди", "hi": "ЁЯй║ рд░реЛрдЧ рдирд┐рджрд╛рди"},
    "reports_name": {"en": "ЁЯУИ Patient Tracking", "mr": "ЁЯУИ рд░реБрдЧреНрдг рдЯреНрд░реЕрдХрд┐рдВрдЧ", "hi": "ЁЯУИ рд░реЛрдЧреА рдЯреНрд░реИрдХрд┐рдВрдЧ"},

    # --- Homepage ---
    "home_title": {"en": "Welcome to Arogya Sahayak", "mr": "рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ", "hi": "рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ"},
    "home_subtitle": {"en": "Your Health Assistant for Diagnosis and Patient Record Management", "mr": "рдирд┐рджрд╛рди рдЖрдгрд┐ рд░реБрдЧреНрдг рд░реЗрдХреЙрд░реНрдб рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдирд╛рд╕рд╛рдареА рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпрдХ", "hi": "рдирд┐рджрд╛рди рдФрд░ рд░реЛрдЧреА рд░рд┐рдХреЙрд░реНрдб рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ"},
    "get_started": {"en": "To get started, select a tool from the navigation panel on the left.", "mr": "рд╕реБрд░реБрд╡рд╛рдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА, рдбрд╛рд╡реАрдХрдбреАрд▓ рдиреЗрд╡реНрд╣рд┐рдЧреЗрд╢рди рдкреЕрдирд▓рдордзреВрди рдПрдХ рд╕рд╛рдзрди рдирд┐рд╡рдбрд╛.", "hi": "рдЖрд░рдВрдн рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдмрд╛рдИрдВ рдУрд░ рдиреЗрд╡рд┐рдЧреЗрд╢рди рдкреИрдирд▓ рд╕реЗ рдПрдХ рдЙрдкрдХрд░рдг рдЪреБрдиреЗрдВред"},
    "feature_dashboard_title": {"en": "ЁЯУК Live Dashboard", "mr": "ЁЯУК рдереЗрдЯ рдбреЕрд╢рдмреЛрд░реНрдб", "hi": "ЁЯУК рд▓рд╛рдЗрд╡ рдбреИрд╢рдмреЛрд░реНрдб"},
    "feature_dashboard_desc": {"en": "Monitor real-time patient statistics from your saved records.", "mr": "рддреБрдордЪреНрдпрд╛ рдЬрддрди рдХреЗрд▓реЗрд▓реНрдпрд╛ рдиреЛрдВрджреАрдВрдордзреВрди рд░реБрдЧреНрдгрд╛рдВрдЪреА рд░рд┐рдЕрд▓-рдЯрд╛рдЗрдо рдЖрдХрдбреЗрд╡рд╛рд░реА рддрдкрд╛рд╕рд╛.", "hi": "рдЕрдкрдиреЗ рд╕рд╣реЗрдЬреЗ рдЧрдП рд░рд┐рдХреЙрд░реНрдб рд╕реЗ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рдХреЗ рд░реЛрдЧреА рдЖрдБрдХрдбрд╝реЛрдВ рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред"},
    "feature_prediction_title": {"en": "ЁЯза AI-Powered Diagnosis", "mr": "ЁЯза рдПрдЖрдп-рд╢рдХреНрддреАрд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдирд┐рджрд╛рди", "hi": "ЁЯза рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдирд┐рджрд╛рди"},
    "feature_prediction_desc": {"en": "Use predictive models for insights on maternal health and general diseases.", "mr": "рдорд╛рддрд╛ рдЖрд░реЛрдЧреНрдп рдЖрдгрд┐ рд╕рд░реНрд╡рд╕рд╛рдзрд╛рд░рдг рд░реЛрдЧрд╛рдВрд╡рд░реАрд▓ рдорд╛рд╣рд┐рддреАрд╕рд╛рдареА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдореЙрдбреЗрд▓реНрд╕ рд╡рд╛рдкрд░рд╛.", "hi": "рдорд╛рддреГ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рд╕рд╛рдорд╛рдиреНрдп рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рднрд╡рд┐рд╖реНрдп рдХрд╣рдиреЗрд╡рд╛рд▓рд╛ рдореЙрдбрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"},
    "feature_reports_title": {"en": "ЁЯУИ Patient Tracking & Reports", "mr": "ЁЯУИ рд░реБрдЧреНрдг рдЯреНрд░реЕрдХрд┐рдВрдЧ рдЖрдгрд┐ рдЕрд╣рд╡рд╛рд▓", "hi": "ЁЯУИ рд░реЛрдЧреА рдЯреНрд░реИрдХрд┐рдВрдЧ рдФрд░ рд░рд┐рдкреЛрд░реНрдЯ"},
    "feature_reports_desc": {"en": "Search, view, and track patient history. Download the entire database as a CSV file.", "mr": "рд░реБрдЧреНрдгрд╛рдВрдЪрд╛ рдЗрддрд┐рд╣рд╛рд╕ рд╢реЛрдзрд╛, рдкрд╣рд╛ рдЖрдгрд┐ рдЯреНрд░реЕрдХ рдХрд░рд╛. рд╕рдВрдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ CSV рдлрд╛рдЗрд▓ рдореНрд╣рдгреВрди рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛.", "hi": "рд░реЛрдЧреА рдХрд╛ рдЗрддрд┐рд╣рд╛рд╕ рдЦреЛрдЬреЗрдВ, рджреЗрдЦреЗрдВ рдФрд░ рдЯреНрд░реИрдХ рдХрд░реЗрдВред рд╕рдВрдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рдХреЛ CSV рдлрд╝рд╛рдЗрд▓ рдХреЗ рд░реВрдк рдореЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВред"},

    # --- Dashboard Page ---
    "dashboard_title": {"en": "Live Clinic Dashboard", "mr": "рдереЗрдЯ рдХреНрд▓рд┐рдирд┐рдХ рдбреЕрд╢рдмреЛрд░реНрдб", "hi": "рд▓рд╛рдЗрд╡ рдХреНрд▓рд┐рдирд┐рдХ рдбреИрд╢рдмреЛрд░реНрдб"},
    "connectivity_status": {"en": "System Status", "mr": "рдкреНрд░рдгрд╛рд▓реА рд╕реНрдерд┐рддреА", "hi": "рд╕рд┐рд╕реНрдЯрдо рд╕реНрдерд┐рддрд┐"},
    "operational": {"en": "Operational", "mr": "рдХрд╛рд░реНрдпрд░рдд", "hi": "рдЪрд╛рд▓реВ"},
    "patient_overview": {"en": "Patient Database Overview", "mr": "рд░реБрдЧреНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рдЖрдврд╛рд╡рд╛", "hi": "рд░реЛрдЧреА рдбреЗрдЯрд╛рдмреЗрд╕ рдЕрд╡рд▓реЛрдХрди"},
    "total_patients_db": {"en": "Total Records in DB", "mr": "рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ рдПрдХреВрдг рдиреЛрдВрджреА", "hi": "рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдХреБрд▓ рд░рд┐рдХреЙрд░реНрдб"},
    "high_risk_patients": {"en": "High-Risk Patients", "mr": "рдЙрдЪреНрдЪ-рдЬреЛрдЦреАрдо рдЕрд╕рд▓реЗрд▓реЗ рд░реБрдЧреНрдг", "hi": "рдЙрдЪреНрдЪ-рдЬреЛрдЦрд┐рдо рд╡рд╛рд▓реЗ рд░реЛрдЧреА"},
    "avg_age_db": {"en": "Average Patient Age", "mr": "рд╕рд░рд╛рд╕рд░реА рд░реБрдЧреНрдг рд╡рдп", "hi": "рдФрд╕рдд рд░реЛрдЧреА рдЖрдпреБ"},
    "risk_level_dist": {"en": "Patient Risk Level Distribution", "mr": "рд░реБрдЧреНрдг рдЬреЛрдЦреАрдо рдкрд╛рддрд│реА рд╡рд┐рддрд░рдг", "hi": "рд░реЛрдЧреА рдЬреЛрдЦрд┐рдо рд╕реНрддрд░ рд╡рд┐рддрд░рдг"},
    "no_data_dashboard": {"en": "No patient data available. Please save a record first.", "mr": "рд░реБрдЧреНрдгрд╛рдЪреА рдорд╛рд╣рд┐рддреА рдЙрдкрд▓рдмреНрдз рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдЖрдзреА рдПрдХ рдиреЛрдВрдж рдЬрддрди рдХрд░рд╛.", "hi": "рдХреЛрдИ рд░реЛрдЧреА рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдПрдХ рд░рд┐рдХреЙрд░реНрдб рд╕рд╣реЗрдЬреЗрдВред"},

    # --- Maternal Health Page ---
    "maternal_title": {"en": "Maternal Health - New Entry", "mr": "рдорд╛рддрд╛ рдЖрд░реЛрдЧреНрдп - рдирд╡реАрди рдиреЛрдВрдж", "hi": "рдорд╛рддреГ рд╕реНрд╡рд╛рд╕реНрдереНрдп - рдирдИ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐"},
    "maternal_desc": { "en": "Enter patient details to assess health risk. The result will be saved to the permanent database.", "mr": "рдЖрд░реЛрдЧреНрдп рдЬреЛрдЦреАрдо рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд░реБрдЧреНрдгрд╛рдЪреЗ рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛. рдирд┐рдХрд╛рд▓ рдХрд╛рдпрдорд╕реНрд╡рд░реВрдкреА рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ рдЬрддрди рдХреЗрд▓рд╛ рдЬрд╛рдИрд▓.", "hi": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬреЛрдЦрд┐рдо рдХрд╛ рдЖрдХрд▓рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд░реЛрдЧреА рдХрд╛ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВред рдкрд░рд┐рдгрд╛рдо рд╕реНрдерд╛рдпреА рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕рд╣реЗрдЬрд╛ рдЬрд╛рдПрдЧрд╛ред"},
    "patient_id": {"en": "Patient Name or ID", "mr": "рд░реБрдЧреНрдгрд╛рдЪреЗ рдирд╛рд╡ рдХрд┐рдВрд╡рд╛ рдЖрдпрдбреА", "hi": "рд░реЛрдЧреА рдХрд╛ рдирд╛рдо рдпрд╛ рдЖрдИрдбреА"},
    "vitals_header": {"en": "Enter Patient Vitals", "mr": "рд░реБрдЧреНрдгрд╛рдЪреЗ рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛", "hi": "рд░реЛрдЧреА рдХреЗ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рдЖрдБрдХрдбрд╝реЗ рджрд░реНрдЬ рдХрд░реЗрдВ"},
    "age": {"en": "Age", "mr": "рд╡рдп", "hi": "рдЖрдпреБ"}, "systolic_bp": {"en": "Systolic BP", "mr": "рд╕рд┐рд╕реНрдЯреЛрд▓рд┐рдХ рдмреАрдкреА", "hi": "рд╕рд┐рд╕реНрдЯреЛрд▓рд┐рдХ рдмреАрдкреА"},
    "diastolic_bp": {"en": "Diastolic BP", "mr": "рдбрд╛рдпрд╕реНрдЯреЛрд▓рд┐рдХ рдмреАрдкреА", "hi": "рдбрд╛рдпрд╕реНрдЯреЛрд▓рд┐рдХ рдмреАрдкреА"}, "bs": {"en": "Blood Sugar (mmol/L)", "mr": "рд░рдХреНрдд рд╢рд░реНрдХрд░рд╛ (mmol/L)", "hi": "рд░рдХреНрдд рд╢рд░реНрдХрд░рд╛ (mmol/L)"},
    "body_temp": {"en": "Body Temp (┬░F)", "mr": "рд╢рд░реАрд░рд╛рдЪреЗ рддрд╛рдкрдорд╛рди (┬░F)", "hi": "рд╢рд░реАрд░ рдХрд╛ рддрд╛рдкрдорд╛рди (┬░F)"}, "heart_rate": {"en": "Heart Rate (bpm)", "mr": "рд╣реГрджрдп рдЧрддреА (bpm)", "hi": "рд╣реГрджрдп рдЧрддрд┐ (bpm)"},
    "assess_and_save_button": {"en": "Assess and Save Record", "mr": "рдореВрд▓реНрдпрд╛рдВрдХрди рдХрд░рд╛ рдЖрдгрд┐ рдиреЛрдВрдж рдЬрддрди рдХрд░рд╛", "hi": "рдЖрдХрд▓рди рдХрд░реЗрдВ рдФрд░ рд░рд┐рдХреЙрд░реНрдб рд╕рд╣реЗрдЬреЗрдВ"},
    "result_header": {"en": "Assessment Result", "mr": "рдореВрд▓реНрдпрд╛рдВрдХрди рдкрд░рд┐рдгрд╛рдо", "hi": "рдореВрд▓реНрдпрд╛рдВрдХрди рдкрд░рд┐рдгрд╛рдо"},
    "outcome_prefix": {"en": "Predicted Risk", "mr": "рд╕рдВрднрд╛рд╡реНрдп рдЬреЛрдЦреАрдо", "hi": "рдЕрдиреБрдорд╛рдирд┐рдд рдЬреЛрдЦрд┐рдо"},
    "record_saved_success": {"en": "Record successfully saved to the database!", "mr": "рдиреЛрдВрдж рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рдбреЗрдЯрд╛рдмреЗрд╕рдордзреНрдпреЗ рдЬрддрди рдЭрд╛рд▓реА!", "hi": "рд░рд┐рдХреЙрд░реНрдб рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕рд╣реЗрдЬ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!"},
    "error_patient_id": {"en": "Patient Name/ID is required.", "mr": "рд░реБрдЧреНрдгрд╛рдЪреЗ рдирд╛рд╡/рдЖрдпрдбреА рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ.", "hi": "рд░реЛрдЧреА рдХрд╛ рдирд╛рдо/рдЖрдИрдбреА рдЖрд╡рд╢реНрдпрдХ рд╣реИред"},
    "low_risk_rec": {"en": "Low risk. Continue regular check-ups.", "mr": "рдХрдореА рдЬреЛрдЦреАрдо. рдирд┐рдпрдорд┐рдд рддрдкрд╛рд╕рдгреА рд╕реБрд░реВ рдареЗрд╡рд╛.", "hi": "рдХрдо рдЬреЛрдЦрд┐рдоред рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ рдЬрд╛рд░реА рд░рдЦреЗрдВред"},
    "mid_risk_rec": {"en": "Medium risk. Schedule a consultation with a doctor.", "mr": "рдордзреНрдпрдо рдЬреЛрдЦреАрдо. рдбреЙрдХреНрдЯрд░рд╛рдВрдЪрд╛ рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛.", "hi": "рдордзреНрдпрдо рдЬреЛрдЦрд┐рдоред рдбреЙрдХреНрдЯрд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред"},
    "high_risk_rec": {"en": "High risk. Seek immediate medical attention.", "mr": "рдЙрдЪреНрдЪ рдЬреЛрдЦреАрдо. рддрд╛рддреНрдХрд╛рд│ рд╡реИрджреНрдпрдХреАрдп рдорджрдд рдШреНрдпрд╛.", "hi": "рдЙрдЪреНрдЪ рдЬреЛрдЦрд┐рдоред рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред"},
    
    # --- Patient Tracking/Reports Page ---
    "reports_title": {"en": "Patient Tracking and Reports", "mr": "рд░реБрдЧреНрдг рдЯреНрд░реЕрдХрд┐рдВрдЧ рдЖрдгрд┐ рдЕрд╣рд╡рд╛рд▓", "hi": "рд░реЛрдЧреА рдЯреНрд░реИрдХрд┐рдВрдЧ рдФрд░ рд░рд┐рдкреЛрд░реНрдЯ"},
    "reports_desc": {"en": "Search for patients by name/ID to view their complete record history. You can also download the entire database.", "mr": "рд░реБрдЧреНрдгрд╛рдВрдЪрд╛ рд╕рдВрдкреВрд░реНрдг рд░реЗрдХреЙрд░реНрдб рдЗрддрд┐рд╣рд╛рд╕ рдкрд╛рд╣рдгреНрдпрд╛рд╕рд╛рдареА рддреНрдпрд╛рдВрдЪреНрдпрд╛ рдирд╛рд╡рд╛рдиреЗ/рдЖрдпрдбреАрдиреЗ рд╢реЛрдзрд╛. рддреБрдореНрд╣реА рд╕рдВрдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рджреЗрдЦреАрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реВ рд╢рдХрддрд╛.", "hi": "рд░реЛрдЧреА рдХрд╛ рдкреВрд░рд╛ рд░рд┐рдХреЙрд░реНрдб рдЗрддрд┐рд╣рд╛рд╕ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдирд╛рдо/рдЖрдИрдбреА рд╕реЗ рдЦреЛрдЬреЗрдВред рдЖрдк рд╕рдВрдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рднреА рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"},
    "search_patient": {"en": "Search Patient by Name or ID...", "mr": "рд░реБрдЧреНрдгрд╛рд▓рд╛ рдирд╛рд╡рд╛рдиреЗ рдХрд┐рдВрд╡рд╛ рдЖрдпрдбреАрдиреЗ рд╢реЛрдзрд╛...", "hi": "рд░реЛрдЧреА рдХреЛ рдирд╛рдо рдпрд╛ рдЖрдИрдбреА рд╕реЗ рдЦреЛрдЬреЗрдВ..."},
    "no_records_db": {"en": "The patient database is empty. Add a new entry from the 'Maternal Health' page.", "mr": "рд░реБрдЧреНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рд░рд┐рдХреНрдд рдЖрд╣реЗ. 'рдорд╛рддрд╛ рдЖрд░реЛрдЧреНрдп' рдкреГрд╖реНрдард╛рд╡рд░реВрди рдирд╡реАрди рдиреЛрдВрдж рдЬреЛрдбрд╛.", "hi": "рд░реЛрдЧреА рдбреЗрдЯрд╛рдмреЗрд╕ рдЦрд╛рд▓реА рд╣реИред 'рдорд╛рддреГ рд╕реНрд╡рд╛рд╕реНрдереНрдп' рдкреГрд╖реНрда рд╕реЗ рдПрдХ рдирдИ рдкреНрд░рд╡рд┐рд╖реНрдЯрд┐ рдЬреЛрдбрд╝реЗрдВред"},
    "showing_results_for": {"en": "Showing results for", "mr": "рдпрд╛рд╕рд╛рдареА рдирд┐рдХрд╛рд▓ рджрд░реНрд╢рд╡рд┐рдд рдЖрд╣реЗ", "hi": "рдХреЗ рд▓рд┐рдП рдкрд░рд┐рдгрд╛рдо рджрд┐рдЦрд╛рдП рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ"},
    "download_db_button": {"en": "Download Full Database (CSV)", "mr": "рд╕рдВрдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛ (CSV)", "hi": "рдкреВрд░реНрдг рдбреЗрдЯрд╛рдмреЗрд╕ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (CSV)"},
    
    # --- Common ---
    "analyzing": {"en": "Analyzing and saving...", "mr": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЖрдгрд┐ рдЬрддрди рдХрд░рдд рдЖрд╣реЗ...", "hi": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдФрд░ рд╕рд╣реЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ..."},
}

# --- 2. HELPER & DATABASE FUNCTIONS ---
def T(key):
    """Fetches a translated string."""
    return translations.get(key, {}).get(st.session_state.lang, key)

@st.cache_data
def load_models():
    """Loads all machine learning models, cached for performance."""
    maternal_model = joblib.load('model/maternal_risk_model.joblib')
    disease_model = joblib.load('model/disease_model.joblib')
    disease_encoder = joblib.load('model/disease_label_encoder.joblib')
    return maternal_model, disease_model, disease_encoder

@st.cache_data
def load_symptom_list():
    """Loads the symptom list from the training data."""
    symptom_data = pd.read_csv('database/Training.csv')
    return symptom_data.columns[:-1].tolist()

def load_patient_database():
    """Loads the patient database from the CSV file. Creates the file if it doesn't exist."""
    if not os.path.exists(DATABASE_FILE):
        # Create empty dataframe with correct columns if file doesn't exist
        df = pd.DataFrame(columns=[
            'PatientID', 'Timestamp', 'Age', 'SystolicBP', 'DiastolicBP',
            'BloodSugar', 'BodyTemp_F', 'HeartRate', 'RiskPrediction'
        ])
        df.to_csv(DATABASE_FILE, index=False)
    return pd.read_csv(DATABASE_FILE)

def add_record_to_database(record):
    """Appends a new patient record to the CSV database."""
    df = pd.DataFrame([record])
    df.to_csv(DATABASE_FILE, mode='a', header=not os.path.exists(DATABASE_FILE), index=False)

# --- Initialize session state ---
if 'lang' not in st.session_state:
    st.session_state.lang = 'en'

# --- Load Models & Data ---
maternal_model, disease_model, disease_encoder = load_models()
symptom_list = load_symptom_list()

# --- ======================================================= ---
# ---                         SIDEBAR                         ---
# --- ======================================================= ---
with st.sidebar:
    st.title("Arogya Sahayak")
    
    lang_map = {"English": "en", "рдорд░рд╛рдареА": "mr", "рд╣рд┐рдиреНрджреА": "hi"}
    lang_options = list(lang_map.keys())
    reverse_lang_map = {v: k for k, v in lang_map.items()}
    current_lang_name = reverse_lang_map[st.session_state.lang]
    current_lang_index = lang_options.index(current_lang_name)
    lang_choice = st.selectbox(T("language_label"), options=lang_options, index=current_lang_index)
    st.session_state.lang = lang_map[lang_choice]
    
    st.divider()

    app_mode = st.radio(
        T("tool_choice_label"),
        [T("home_page_name"), T("dashboard_name"), T("maternal_tool_name"), T("disease_tool_name"), T("reports_name")],
        label_visibility="collapsed"
    )
    
    st.divider()
    st.info(T("sidebar_info"))

# --- ======================================================= ---
# ---                          HOMEPAGE                       ---
# --- ======================================================= ---
if app_mode == T("home_page_name"):
    st.title(T("home_title"))
    st.markdown(f"#### {T('home_subtitle')}")
    st.write(T("get_started"))
    st.divider()

    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(border=True):
            st.markdown(f"**{T('feature_dashboard_title')}**")
            st.write(T('feature_dashboard_desc'))
    with col2:
        with st.container(border=True):
            st.markdown(f"**{T('feature_prediction_title')}**")
            st.write(T('feature_prediction_desc'))
    with col3:
        with st.container(border=True):
            st.markdown(f"**{T('feature_reports_title')}**")
            st.write(T('feature_reports_desc'))

# --- ======================================================= ---
# ---                        DASHBOARD                        ---
# --- ======================================================= ---
elif app_mode == T("dashboard_name"):
    st.title(T("dashboard_title"))
    patient_df = load_patient_database()

    if patient_df.empty:
        st.warning(T("no_data_dashboard"))
    else:
        total_patients = patient_df.shape[0]
        high_risk_count = patient_df[patient_df['RiskPrediction'] == 'High Risk'].shape[0]
        avg_age = int(patient_df['Age'].mean())
        
        risk_dist = patient_df['RiskPrediction'].value_counts().reset_index()
        risk_dist.columns = ['Risk Level', 'Count']

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(label=T("connectivity_status"), value=T("operational"))
        with col2:
            st.metric(label=T("total_patients_db"), value=total_patients)
        with col3:
            st.metric(label=T("high_risk_patients"), value=high_risk_count)
        with col4:
            st.metric(label=T("avg_age_db"), value=f"{avg_age} yrs")

        st.divider()
        st.subheader(T("risk_level_dist"))
        st.bar_chart(risk_dist, x='Risk Level', y='Count', color="#ff4b4b")

# --- ======================================================= ---
# ---               MATERNAL HEALTH - NEW ENTRY               ---
# --- ======================================================= ---
elif app_mode == T("maternal_tool_name"):
    st.title(T("maternal_title"))
    st.write(T("maternal_desc"))
    
    with st.form("vitals_form"):
        patient_id = st.text_input(T("patient_id"))
        st.subheader(T("vitals_header"))
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input(T("age"), 10, 70, 25, 1)
            systolic_bp = st.number_input(T("systolic_bp"), 70, 180, 120, 1)
            diastolic_bp = st.number_input(T("diastolic_bp"), 40, 120, 80, 1)
        with col2:
            bs = st.number_input(T("bs"), 6.0, 19.0, 7.5, 0.1, "%.1f")
            body_temp = st.number_input(T("body_temp"), 96.0, 104.0, 98.6, 0.1, "%.1f")
            heart_rate = st.number_input(T("heart_rate"), 60, 100, 75, 1)
        
        submitted = st.form_submit_button(T("assess_and_save_button"), use_container_width=True, type="primary")

    if submitted:
        if not patient_id:
            st.error(T("error_patient_id"))
        else:
            input_data = pd.DataFrame({'Age': [age], 'SystolicBP': [systolic_bp], 'DiastolicBP': [diastolic_bp], 'BS': [bs], 'BodyTemp': [body_temp], 'HeartRate': [heart_rate]})
            with st.spinner(T("analyzing")):
                time.sleep(0.5)
                prediction = maternal_model.predict(input_data)[0]
                risk_map = {"low risk": "Low Risk", "mid risk": "Medium Risk", "high risk": "High Risk"}
                risk_result = risk_map.get(prediction, "Unknown")

                new_record = {
                    'PatientID': patient_id,
                    'Timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'Age': age, 'SystolicBP': systolic_bp, 'DiastolicBP': diastolic_bp,
                    'BloodSugar': bs, 'BodyTemp_F': body_temp, 'HeartRate': heart_rate,
                    'RiskPrediction': risk_result
                }
                add_record_to_database(new_record)
            
            st.success(T("record_saved_success"), icon="тЬЕ")
            st.divider()
            st.subheader(T("result_header"))
            
            if prediction == 'low risk':
                st.info(f"**{T('outcome_prefix')}: {risk_result}** - {T('low_risk_rec')}")
            elif prediction == 'mid risk':
                st.warning(f"**{T('outcome_prefix')}: {risk_result}** - {T('mid_risk_rec')}")
            else:
                st.error(f"**{T('outcome_prefix')}: {risk_result}** - {T('high_risk_rec')}")

# --- ======================================================= ---
# ---               GENERAL DISEASE PREDICTOR                 ---
# --- ======================================================= ---
elif app_mode == T("disease_tool_name"):
    st.title(T("disease_tool_name"))
    st.write("Select patient symptoms for a preliminary, AI-based diagnosis. This tool is for informational purposes only.")
    
    selected_symptoms = st.multiselect("Select Symptoms", options=symptom_list)

    if st.button("Predict Disease", use_container_width=True, type="primary"):
        if selected_symptoms:
            input_vector = [0] * len(symptom_list)
            for symptom in selected_symptoms:
                if symptom in symptom_list:
                    input_vector[symptom_list.index(symptom)] = 1
            
            with st.spinner("Analyzing symptoms..."):
                time.sleep(0.5)
                numeric_prediction = disease_model.predict([input_vector])[0]
                disease_name = disease_encoder.inverse_transform([numeric_prediction])[0]

            st.divider()
            st.success(f"**Predicted Condition:** {disease_name.replace('_', ' ').title()}")
            st.warning("**Disclaimer:** This is a prediction, not a final diagnosis. Consult a qualified doctor.")
        else:
            st.warning("Please select at least one symptom.")

# --- ======================================================= ---
# ---                 PATIENT TRACKING & REPORTS              ---
# --- ======================================================= ---
elif app_mode == T("reports_name"):
    st.title(T("reports_title"))
    st.write(T("reports_desc"))
    
    patient_df = load_patient_database()
    
    if patient_df.empty:
        st.info(T("no_records_db"))
    else:
        search_query = st.text_input(T("search_patient"), "")
        
        if search_query:
            results_df = patient_df[patient_df['PatientID'].astype(str).str.contains(search_query, case=False)]
            st.write(f"{T('showing_results_for')}: **{search_query}**")
        else:
            results_df = patient_df
        
        # Display dataframe with sorted results
        st.dataframe(results_df.sort_values(by='Timestamp', ascending=False), use_container_width=True)
        
        # Download button
        csv = patient_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label=T("download_db_button"),
            data=csv,
            file_name=f"arogya_sahayak_full_database_{datetime.now().strftime('%Y%m%d')}.csv",
            mime='text/csv',
            use_container_width=True,
            type="primary"
        )
